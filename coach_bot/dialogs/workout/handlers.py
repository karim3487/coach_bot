from datetime import date

from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button

from aiogram import types

from coach_bot.models.schemas import Workout, ProgressCreateByTelegram
from coach_bot.services.coach_api import api_client
from coach_bot.states.user import UserWorkout, UserMainMenu


def on_finish_workout():
    return None


async def start_exercise(callback: CallbackQuery, button: Button, manager: DialogManager):
    manager.dialog_data["current_index"] = 0
    await manager.switch_to(UserWorkout.exercise)


async def next_exercise(callback: types.CallbackQuery, button: Button, manager: DialogManager):
    current_index = manager.dialog_data.get("current_index", 0)
    workout = manager.dialog_data.get("workout")

    if not workout:
        await callback.answer("‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        await manager.start(UserMainMenu.menu)
        return

    if current_index + 1 >= len(workout.exercises_list):
        await callback.message.answer("üèÅ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        await manager.start(UserMainMenu.menu)
        return

    manager.dialog_data["current_index"] = current_index + 1
    await manager.switch_to(UserWorkout.exercise)


async def on_record_result(callback: types.CallbackQuery, button: Button, manager: DialogManager):
    workout: Workout = manager.dialog_data["workout"]
    index = manager.dialog_data.get("current_index", 0)
    ex = workout.exercises_list[index]

    if ex.sets and ex.reps:
        await manager.switch_to(UserWorkout.enter_reps)
    elif ex.duration:
        await manager.switch_to(UserWorkout.enter_duration)
    else:
        await callback.message.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        await manager.switch_to(UserWorkout.exercise)


async def on_progress_value_entered(
        message: types.Message, _: MessageInput, manager: DialogManager,
):
    try:
        value = float(message.text.replace(",", "."))
        manager.dialog_data["progress_value"] = value
        await message.answer("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. (–°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è)")
        await manager.switch_to(UserWorkout.exercise)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 12.5")


async def on_reps_entered(message: types.Message, _: MessageInput, manager: DialogManager):
    try:
        reps = int(message.text)
        manager.dialog_data["progress_reps"] = reps
        await manager.switch_to(UserWorkout.enter_weight)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.")


async def on_weight_entered(message: types.Message, _: MessageInput, manager: DialogManager):
    try:
        weight = float(message.text.replace(",", "."))
        reps = manager.dialog_data["progress_reps"]
        manager.dialog_data["progress_metric"] = {
            "metric": "weight",
            "value": weight,
            "units": "kg",
            "notes": f"{reps} reps",
        }
        await manager.switch_to(UserWorkout.enter_note)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 40 –∏–ª–∏ 75.5.")


async def on_duration_entered(message: types.Message, _: MessageInput, manager: DialogManager):
    try:
        duration = int(message.text)
        manager.dialog_data["progress_metric"] = {
            "metric": "duration",
            "value": duration,
            "units": "s",
            "notes": "",
        }
        await manager.switch_to(UserWorkout.enter_note)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")


async def on_note_entered(message: types.Message, _: MessageInput, manager: DialogManager):
    telegram_id = message.from_user.id
    workout = manager.dialog_data["workout"]
    index = manager.dialog_data["current_index"]
    exercise = workout.exercises_list[index]
    metric_data = manager.dialog_data["progress_metric"]

    note = message.text.strip()
    if note != "-":
        metric_data["notes"] += f" ‚Äî {note}"

    progress = ProgressCreateByTelegram(
        telegram_id=telegram_id,
        date=date.today(),
        workout=workout.id,
        exercise=exercise.exercise.id,
        metric=metric_data["metric"],
        value=metric_data["value"],
        units=metric_data["units"],
        notes=metric_data["notes"],
    )

    await api_client.save_progress(progress)

    await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await manager.switch_to(UserWorkout.exercise)
