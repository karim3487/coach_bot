from random import randrange

from aiogram_dialog import DialogManager

from coach_bot.dialogs.common.utils import get_display_name
from coach_bot.models.schemas import Workout, WorkoutExerciseRead
from coach_bot.utils.constants import MUSCLE_GROUP, EQUIPMENT, LEVEL


def render_exercises(workout: Workout) -> str:
    parts = []

    for i, ex in enumerate(sorted(workout.exercises_list, key=lambda e: e.order), 1):
        name = ex.exercise.name
        sets = ex.sets
        reps = ex.reps
        duration = ex.duration
        rest = ex.rest_interval
        notes = ex.notes

        if sets and reps:
            desc = f"{sets}√ó{reps}"
        elif duration:
            desc = f"‚è± {duration} —Å–µ–∫"
        else:
            desc = "üìå –ë–µ–∑ –¥–µ—Ç–∞–ª–µ–π"

        line = f"<b>{i}. {name}</b>: {desc}"

        if rest:
            line += f"  üïì –û—Ç–¥—ã—Ö: {rest} —Å–µ–∫"
        if notes:
            line += f"\n   üí¨ <i>{notes}</i>"

        parts.append(line)

    return "\n".join(parts)


async def render_workout(workout: Workout) -> str:
    return (
        f"üìã <b>{workout.name}</b>\n"
        f"‚è±Ô∏è <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:</b> {workout.duration_est} –º–∏–Ω\n"
        f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {get_display_name(LEVEL, workout.level.value)}\n"
        f"üì¶ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b> {len(workout.exercises_list)}\n"
    )


async def workout_getter(dialog_manager: DialogManager, **kwargs):
    workout: Workout = dialog_manager.start_data.get("workout")

    if not workout:
        return {"text": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."}

    dialog_manager.dialog_data["workout"] = workout

    workout_text = await render_workout(workout)
    exercises_text = render_exercises(workout)

    return {
        "text": (
            "üèãÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
            f"{workout_text}\n"
            f"üìã <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n"
            f"{exercises_text}"
        ),
    }


async def exercise_getter(dialog_manager: DialogManager, **kwargs):
    workout: Workout = dialog_manager.dialog_data["workout"]
    index = dialog_manager.dialog_data.get("current_index", 0)
    exercises = workout.exercises_list

    if index >= len(exercises):
        return {
            "text": "üéâ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
            "media_url": None,
            "finished": True,
        }

    ex: WorkoutExerciseRead = exercises[index]
    ex_data = ex.exercise

    description_parts = [
        f"<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {ex_data.name}",
        f"<b>–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞:</b> {get_display_name(MUSCLE_GROUP, ex_data.muscle_group.value)}",
        f"<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b> {get_display_name(EQUIPMENT, ex_data.equipment.value)}",
    ]

    if ex.sets and ex.reps:
        description_parts.append(f"<b>–°–µ—Ç—ã √ó –ü–æ–≤—Ç–æ—Ä—ã:</b> {ex.sets}√ó{ex.reps}")
    elif ex.duration:
        description_parts.append(f"<b>‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {ex.duration} —Å–µ–∫")

    if ex.rest_interval:
        description_parts.append(f"<b>üïì –û—Ç–¥—ã—Ö –ø–æ—Å–ª–µ:</b> {ex.rest_interval} —Å–µ–∫")

    if ex.notes:
        description_parts.append(f"<b>üí¨ –°–æ–≤–µ—Ç—ã:</b>\n{ex.notes}")

    urls = [
        "https://v2.exercisedb.io/image/QrtoxrcB3ZsmBT",
        "https://v2.exercisedb.io/image/nnCTuaNpbNNJeD",
        "https://v2.exercisedb.io/image/kgIUHE725ArSWa",
        "https://v2.exercisedb.io/image/0WW6Dx-BkChZKj",
    ]

    return {
        "text": "\n".join(description_parts),
        # "media_url": ex_data.media_url,
        "media_url": urls[randrange(0, 3)],
        "is_last": index == len(exercises) - 1,
    }
