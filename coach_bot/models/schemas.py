# generated by datamodel-codegen:
#   filename:  http://localhost:8000/api/v1/schema
#   timestamp: 2025-04-24T15:19:39+00:00

from __future__ import annotations

from datetime import datetime, time
from decimal import Decimal
from enum import Enum
from typing import Annotated, Any, List, Optional, Union

from pydantic import BaseModel, conint, constr, Field


class BlankEnum(Enum):
    field_ = ""


class ContraindicationsEnum(Enum):
    heart_disease = "heart_disease"
    hypertension = "hypertension"
    diabetes = "diabetes"
    asthma = "asthma"
    joint_problems = "joint_problems"
    pregnancy = "pregnancy"
    back_pain = "back_pain"
    obesity = "obesity"
    none = "none"


class GenderEnum(Enum):
    male = "male"
    female = "female"


class GenerateCodesInput(BaseModel):
    telegram_id: int
    count: Optional[conint(ge=1, le=20)] = 10


class Goal(BaseModel):
    id: int
    name: Annotated[
        str,
        Field(
            max_length=50,
            description="Name of the fitness goal (e.g. weight loss, muscle gain)",
        ),
    ]
    slug: Annotated[str, Field(max_length=60, pattern=r"^[-a-zA-Z0-9_]+$")]
    description: Optional[str] = Field(
        default=None, description="Optional description or guidance for the goal"
    )


class Goal(BaseModel):
    id: int | None
    name: Annotated[str, Field(max_length=50, description="Name of the fitness goal (e.g. weight loss, muscle gain)")]
    slug: Annotated[str, Field(max_length=60, pattern=r"^[-a-zA-Z0-9_]+$")]
    description: Optional[str] = Field(
        default=None, description="Optional description or guidance for the goal"
    )


class TelegramID(BaseModel):
    telegram_id: conint(ge=-9223372036854775808, le=9223372036854775807)


class TrainingLocationEnum(Enum):
    gym = "gym"
    home = "home"
    outdoors = "outdoors"


class UseCodeInput(BaseModel):
    code: str
    telegram_id: int


class ClientProfile(BaseModel):
    id: int
    goal: Goal
    telegram_ids: List[TelegramID]
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime] = None
    name: constr(max_length=100) = Field(..., description="Full name or nickname")
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description="Weight in kg")
    height: Decimal = Field(..., description="Height in cm")
    gender: GenderEnum = Field(
        ..., description="Gender of the user\n\n* `male` - Male\n* `female` - Female"
    )
    contraindications: Optional[Union[ContraindicationsEnum, BlankEnum]] = Field(
        None,
        description="Medical limitations or injuries (free text)\n\n* `heart_disease` - Heart disease\n* `hypertension` - Hypertension\n* `diabetes` - Diabetes\n* `asthma` - Asthma\n* `joint_problems` - Joint problems\n* `pregnancy` - Pregnancy\n* `back_pain` - Back pain\n* `obesity` - Obesity\n* `none` - None",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description="Preferred training location\n\n* `gym` - Gym\n* `home` - Home\n* `outdoors` - Outdoors",
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time = Field(..., description="Preferred daily training time")


class ClientProfileCreate(BaseModel):
    telegram_id: int
    name: constr(max_length=100) = Field(..., description="Full name or nickname")
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description="Weight in kg")
    height: Decimal = Field(..., description="Height in cm")
    gender: GenderEnum = Field(
        ..., description="Gender of the user\n\n* `male` - Male\n* `female` - Female"
    )
    contraindications: Optional[Union[ContraindicationsEnum, BlankEnum]] = Field(
        None,
        description="Medical limitations or injuries (free text)\n\n* `heart_disease` - Heart disease\n* `hypertension` - Hypertension\n* `diabetes` - Diabetes\n* `asthma` - Asthma\n* `joint_problems` - Joint problems\n* `pregnancy` - Pregnancy\n* `back_pain` - Back pain\n* `obesity` - Obesity\n* `none` - None",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description="Preferred training location\n\n* `gym` - Gym\n* `home` - Home\n* `outdoors` - Outdoors",
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time = Field(..., description="Preferred daily training time")
    goal: Optional[int] = Field(
        None, description="Main fitness goal selected by the user"
    )


class ClientProfileShort(BaseModel):
    name: constr(max_length=100) = Field(..., description="Full name or nickname")
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description="Weight in kg")
    height: Decimal = Field(..., description="Height in cm")
    gender: GenderEnum = Field(
        ..., description="Gender of the user\n\n* `male` - Male\n* `female` - Female"
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description="Preferred training location\n\n* `gym` - Gym\n* `home` - Home\n* `outdoors` - Outdoors",
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time = Field(..., description="Preferred daily training time")
    goal: Optional[str] = Field(
        None, description="Main fitness goal selected by the user"
    )


class ClientProfileUpsert(BaseModel):
    id: int
    telegram_id: int
    name: constr(max_length=100) = Field(..., description="Full name or nickname")
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description="Weight in kg")
    height: Decimal = Field(..., description="Height in cm")
    gender: GenderEnum = Field(
        ..., description="Gender of the user\n\n* `male` - Male\n* `female` - Female"
    )
    contraindications: Optional[Union[ContraindicationsEnum, BlankEnum]] = Field(
        None,
        description="Medical limitations or injuries (free text)\n\n* `heart_disease` - Heart disease\n* `hypertension` - Hypertension\n* `diabetes` - Diabetes\n* `asthma` - Asthma\n* `joint_problems` - Joint problems\n* `pregnancy` - Pregnancy\n* `back_pain` - Back pain\n* `obesity` - Obesity\n* `none` - None",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description="Preferred training location\n\n* `gym` - Gym\n* `home` - Home\n* `outdoors` - Outdoors",
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time = Field(..., description="Preferred daily training time")
    goal: Optional[int] = Field(
        None, description="Main fitness goal selected by the user"
    )


class PatchedClientProfile(BaseModel):
    id: Optional[int] = None
    goal: Optional[Goal] = None
    telegram_ids: Optional[List[TelegramID]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    name: Optional[constr(max_length=100)] = Field(
        None, description="Full name or nickname"
    )
    age: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description="User's age in years"
    )
    weight: Optional[Decimal] = Field(None, description="Weight in kg")
    height: Optional[Decimal] = Field(None, description="Height in cm")
    gender: Optional[GenderEnum] = Field(
        None, description="Gender of the user\n\n* `male` - Male\n* `female` - Female"
    )
    contraindications: Optional[Union[ContraindicationsEnum, BlankEnum]] = Field(
        None,
        description="Medical limitations or injuries (free text)\n\n* `heart_disease` - Heart disease\n* `hypertension` - Hypertension\n* `diabetes` - Diabetes\n* `asthma` - Asthma\n* `joint_problems` - Joint problems\n* `pregnancy` - Pregnancy\n* `back_pain` - Back pain\n* `obesity` - Obesity\n* `none` - None",
    )
    training_location: Optional[TrainingLocationEnum] = Field(
        None,
        description="Preferred training location\n\n* `gym` - Gym\n* `home` - Home\n* `outdoors` - Outdoors",
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: Optional[time] = Field(
        None, description="Preferred daily training time"
    )
