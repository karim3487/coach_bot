# generated by datamodel-codegen:
#   filename:  http://localhost:8000/api/v1/schema
#   timestamp: 2025-05-09T14:58:22+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from datetime import time as time_aliased
from decimal import Decimal
from enum import Enum
from typing import Any, List, Optional

from pydantic import AnyUrl, BaseModel, conint, constr, Field


class CategoryEnum(Enum):
    strength = 'strength'
    cardio = 'cardio'
    stretching = 'stretching'
    yoga = 'yoga'
    mixed = 'mixed'


class CreateAIPlanByTelegram(BaseModel):
    telegram_id: str


class DifficultyEnum(Enum):
    beginner = 'beginner'
    intermediate = 'intermediate'
    advanced = 'advanced'


class EquipmentEnum(Enum):
    bodyweight = 'bodyweight'
    dumbbells = 'dumbbells'
    barbell = 'barbell'
    resistance_bands = 'resistance_bands'
    kettlebell = 'kettlebell'
    machine = 'machine'
    bench = 'bench'
    cable = 'cable'
    medicine_ball = 'medicine_ball'
    stability_ball = 'stability_ball'
    bosu_ball = 'bosu_ball'
    foam_roller = 'foam_roller'
    box = 'box'
    pull_up_bar = 'pull_up_bar'
    rope = 'rope'
    trx = 'trx'
    smith_machine = 'smith_machine'
    mat = 'mat'
    other = 'other'


class GenderEnum(Enum):
    male = 'male'
    female = 'female'


class GenerateCodesInput(BaseModel):
    telegram_id: int
    count: Optional[conint(ge=1, le=20)] = 10


class Goal(BaseModel):
    id: int
    name: constr(max_length=50) = Field(
        ..., description='Name of the fitness goal (e.g. weight loss, muscle gain)'
    )
    slug: str
    description: Optional[str] = Field(
        None, description='Optional description or guidance for the goal'
    )


class LevelEnum(Enum):
    beginner = 'beginner'
    intermediate = 'intermediate'
    advanced = 'advanced'


class LocationTypeEnum(Enum):
    gym = 'gym'
    home = 'home'
    outdoors = 'outdoors'


class MuscleGroupEnum(Enum):
    chest = 'chest'
    back = 'back'
    shoulders = 'shoulders'
    arms = 'arms'
    legs = 'legs'
    core = 'core'
    full_body = 'full_body'
    flexibility = 'flexibility'
    other = 'other'


class PaginatedGoalList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Goal]] = None


class PlanCreate(BaseModel):
    profile_id: int


class PlanCreateFromProgram(BaseModel):
    profile_id: int
    program_id: int


class PlanCreateFromProgramByTelegram(BaseModel):
    telegram_id: int
    program_id: int


class Program(BaseModel):
    id: int
    name: constr(max_length=100) = Field(
        ..., description='Name of the training program'
    )
    slug: str
    goal: str
    description: str = Field(
        ..., description='Description of the program structure and focus'
    )
    days_per_week: conint(ge=0, le=2147483647) = Field(
        ..., description='Number of training days per week'
    )
    duration_weeks: conint(ge=0, le=2147483647) = Field(
        ..., description='Total duration of the program in weeks'
    )
    level: LevelEnum = Field(
        ...,
        description='Difficulty level (e.g., beginner, intermediate, advanced)\n\n* `beginner` - Новичок\n* `intermediate` - Средний\n* `advanced` - Продвинутый',
    )
    location_type: LocationTypeEnum = Field(
        ...,
        description='Preferred training location (e.g., gym, home, any)\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    active: Optional[bool] = Field(
        None, description='Is this program currently active and assignable?'
    )


class ProgramDetail(BaseModel):
    id: int
    name: constr(max_length=100) = Field(
        ..., description='Name of the training program'
    )
    slug: str
    goal: str
    description: str = Field(
        ..., description='Description of the program structure and focus'
    )
    days_per_week: conint(ge=0, le=2147483647) = Field(
        ..., description='Number of training days per week'
    )
    duration_weeks: conint(ge=0, le=2147483647) = Field(
        ..., description='Total duration of the program in weeks'
    )
    level: LevelEnum = Field(
        ...,
        description='Difficulty level (e.g., beginner, intermediate, advanced)\n\n* `beginner` - Новичок\n* `intermediate` - Средний\n* `advanced` - Продвинутый',
    )
    location_type: LocationTypeEnum = Field(
        ...,
        description='Preferred training location (e.g., gym, home, any)\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    active: Optional[bool] = Field(
        None, description='Is this program currently active and assignable?'
    )
    schedule: str


class Progress(BaseModel):
    id: int
    client_profile: int = Field(..., description='User this progress entry belongs to')
    date: date_aliased = Field(..., description='Date of progress record')
    plan: Optional[int] = Field(None, description='Related training plan (optional)')
    workout: Optional[int] = Field(
        None, description='Workout this progress is related to (optional)'
    )
    workout_name: str
    exercise: Optional[int] = Field(
        None, description='Specific exercise this metric is for (optional)'
    )
    exercise_name: str
    metric: constr(max_length=50) = Field(
        ..., description='Type of metric: weight, reps, time, bodyfat, etc.'
    )
    value: Decimal = Field(..., description='Value of the metric')
    units: constr(max_length=20) = Field(
        ..., description='Units of the metric (e.g. kg, %, min, reps)'
    )
    notes: Optional[str] = Field(None, description='Additional info or context')


class ProgressCreateByTelegram(BaseModel):
    id: int
    telegram_id: int
    date: date_aliased = Field(..., description='Date of progress record')
    metric: constr(max_length=50) = Field(
        ..., description='Type of metric: weight, reps, time, bodyfat, etc.'
    )
    value: Decimal = Field(..., description='Value of the metric')
    units: constr(max_length=20) = Field(
        ..., description='Units of the metric (e.g. kg, %, min, reps)'
    )
    notes: Optional[str] = Field(None, description='Additional info or context')
    plan: Optional[int] = Field(None, description='Related training plan (optional)')
    workout: Optional[int] = Field(
        None, description='Workout this progress is related to (optional)'
    )
    exercise: Optional[int] = Field(
        None, description='Specific exercise this metric is for (optional)'
    )


class Schedule(BaseModel):
    id: int
    plan: int = Field(..., description='Training plan this schedule entry belongs to')
    date: date_aliased = Field(..., description='Scheduled date of the workout')
    time: time_aliased = Field(..., description='Scheduled time for the workout')
    workout: Optional[int] = Field(
        None, description='Workout session assigned to this date'
    )
    workout_name: str
    day_number: conint(ge=0, le=2147483647) = Field(
        ..., description='Sequential number of workout in the plan'
    )
    completed: Optional[bool] = Field(None, description='Was the workout completed?')
    completed_at: datetime | None = Field(
        ..., description='Timestamp when workout was completed'
    )
    notes: Optional[str] = Field(None, description='Optional user notes or feedback')


class ScheduleCompleteInput(BaseModel):
    telegram_id: int


class StatusEnum(Enum):
    active = 'active'
    completed = 'completed'
    cancelled = 'cancelled'


class TelegramID(BaseModel):
    telegram_id: conint(ge=-9223372036854775808, le=9223372036854775807)


class TrainingLocationEnum(Enum):
    gym = 'gym'
    home = 'home'
    outdoors = 'outdoors'


class TypeEnum(Enum):
    strength = 'strength'
    cardio = 'cardio'
    stretching = 'stretching'
    yoga = 'yoga'
    mixed = 'mixed'


class UseCodeInput(BaseModel):
    code: str
    telegram_id: int


class WorkoutExerciseCreate(BaseModel):
    exercise_id: int
    sets: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Number of sets (for strength exercises)'
    )
    reps: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Number of reps per set (for strength exercises)'
    )
    duration: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Duration in seconds (for cardio/stretching exercises)'
    )
    rest_interval: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Rest time in seconds after this exercise'
    )
    order: conint(ge=0, le=2147483647) = Field(
        ..., description='Execution order within the workout'
    )
    notes: Optional[str] = Field(
        None, description='Optional notes or tips for this exercise'
    )


class ClientProfile(BaseModel):
    id: int
    goal: Goal
    telegram_ids: List[TelegramID]
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime] = None
    name: constr(max_length=100) = Field(..., description='Full name or nickname')
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description='Weight in kg')
    height: Decimal = Field(..., description='Height in cm')
    gender: GenderEnum = Field(
        ..., description='Gender of the user\n\n* `male` - Male\n* `female` - Female'
    )
    contraindications: Optional[Any] = Field(
        None,
        description="Medical limitations or injuries(e.g. ['heart_disease', 'asthma'])",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description='Preferred training location\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time_aliased = Field(
        ..., description='Preferred daily training time'
    )


class ClientProfileCreate(BaseModel):
    telegram_id: int
    name: constr(max_length=100) = Field(..., description='Full name or nickname')
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description='Weight in kg')
    height: Decimal = Field(..., description='Height in cm')
    gender: GenderEnum = Field(
        ..., description='Gender of the user\n\n* `male` - Male\n* `female` - Female'
    )
    contraindications: Optional[Any] = Field(
        None,
        description="Medical limitations or injuries(e.g. ['heart_disease', 'asthma'])",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description='Preferred training location\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time_aliased = Field(
        ..., description='Preferred daily training time'
    )
    goal: Optional[int] = Field(
        None, description='Main fitness goal selected by the user'
    )


class ClientProfileShort(BaseModel):
    goal: Goal
    name: constr(max_length=100) = Field(..., description='Full name or nickname')
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description='Weight in kg')
    height: Decimal = Field(..., description='Height in cm')
    gender: GenderEnum = Field(
        ..., description='Gender of the user\n\n* `male` - Male\n* `female` - Female'
    )
    contraindications: Optional[Any] = Field(
        None,
        description="Medical limitations or injuries(e.g. ['heart_disease', 'asthma'])",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description='Preferred training location\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time_aliased = Field(
        ..., description='Preferred daily training time'
    )


class ClientProfileUpsert(BaseModel):
    id: int
    telegram_id: int
    goal: int
    goal_display: str
    name: constr(max_length=100) = Field(..., description='Full name or nickname')
    age: conint(ge=0, le=2147483647) = Field(..., description="User's age in years")
    weight: Decimal = Field(..., description='Weight in kg')
    height: Decimal = Field(..., description='Height in cm')
    gender: GenderEnum = Field(
        ..., description='Gender of the user\n\n* `male` - Male\n* `female` - Female'
    )
    contraindications: Optional[Any] = Field(
        None,
        description="Medical limitations or injuries(e.g. ['heart_disease', 'asthma'])",
    )
    training_location: TrainingLocationEnum = Field(
        ...,
        description='Preferred training location\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: time_aliased = Field(
        ..., description='Preferred daily training time'
    )


class Exercise(BaseModel):
    id: int
    name: constr(max_length=100) = Field(..., description='Name of the exercise')
    type: TypeEnum = Field(
        ...,
        description='Main type: strength, cardio, yoga, etc.\n\n* `strength` - Сила\n* `cardio` - Кардио\n* `stretching` - Растяжка\n* `yoga` - Йога\n* `mixed` - Смешанное',
    )
    muscle_group: MuscleGroupEnum = Field(
        ...,
        description='Primary muscle group targeted\n\n* `chest` - Грудные мышцы\n* `back` - Спина\n* `shoulders` - Плечи\n* `arms` - Руки\n* `legs` - Ноги\n* `core` - Пресс / Корпус\n* `full_body` - Всё тело\n* `flexibility` - Гибкость / Подвижность\n* `other` - Другое',
    )
    equipment: EquipmentEnum = Field(
        ...,
        description='Required equipment for the exercise\n\n* `bodyweight` - Собственный вес\n* `dumbbells` - Гантели\n* `barbell` - Штанга\n* `resistance_bands` - Эспандеры / Резиновые ленты\n* `kettlebell` - Гиря\n* `machine` - Тренажёры\n* `bench` - Скамья\n* `cable` - Блочный тренажёр\n* `medicine_ball` - Медицинский мяч\n* `stability_ball` - Фитбол\n* `bosu_ball` - Босу-платформа\n* `foam_roller` - Массажный ролик (Foam Roller)\n* `box` - Плиометрическая тумба\n* `pull_up_bar` - Турник\n* `rope` - Канат\n* `trx` - TRX-петли\n* `smith_machine` - Силовая рама (Смит-машина)\n* `mat` - Коврик\n* `other` - Другое',
    )
    difficulty: DifficultyEnum = Field(
        ...,
        description='Recommended difficulty level\n\n* `beginner` - Новичок\n* `intermediate` - Средний\n* `advanced` - Продвинутый',
    )
    description: Optional[str] = Field(
        None, description='Instructions and notes about execution'
    )
    media_url: Optional[AnyUrl] = Field(
        None, description='Link to a demo video or image (optional)'
    )
    media_file: Optional[AnyUrl] = None


class ExerciseShort(BaseModel):
    id: int
    name: constr(max_length=100) = Field(..., description='Name of the exercise')
    muscle_group: MuscleGroupEnum = Field(
        ...,
        description='Primary muscle group targeted\n\n* `chest` - Грудные мышцы\n* `back` - Спина\n* `shoulders` - Плечи\n* `arms` - Руки\n* `legs` - Ноги\n* `core` - Пресс / Корпус\n* `full_body` - Всё тело\n* `flexibility` - Гибкость / Подвижность\n* `other` - Другое',
    )
    equipment: EquipmentEnum = Field(
        ...,
        description='Required equipment for the exercise\n\n* `bodyweight` - Собственный вес\n* `dumbbells` - Гантели\n* `barbell` - Штанга\n* `resistance_bands` - Эспандеры / Резиновые ленты\n* `kettlebell` - Гиря\n* `machine` - Тренажёры\n* `bench` - Скамья\n* `cable` - Блочный тренажёр\n* `medicine_ball` - Медицинский мяч\n* `stability_ball` - Фитбол\n* `bosu_ball` - Босу-платформа\n* `foam_roller` - Массажный ролик (Foam Roller)\n* `box` - Плиометрическая тумба\n* `pull_up_bar` - Турник\n* `rope` - Канат\n* `trx` - TRX-петли\n* `smith_machine` - Силовая рама (Смит-машина)\n* `mat` - Коврик\n* `other` - Другое',
    )
    media_url: Optional[AnyUrl] = Field(
        None, description='Link to a demo video or image (optional)'
    )


class PaginatedClientProfileList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[ClientProfile]] = None


class PaginatedExerciseList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Exercise]] = None


class PaginatedProgramList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Program]] = None


class PaginatedProgressList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Progress]] = None


class PaginatedScheduleList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Schedule]] = None


class PatchedClientProfile(BaseModel):
    id: Optional[int] = None
    goal: Optional[Goal] = None
    telegram_ids: Optional[List[TelegramID]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    name: Optional[constr(max_length=100)] = Field(
        None, description='Full name or nickname'
    )
    age: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description="User's age in years"
    )
    weight: Optional[Decimal] = Field(None, description='Weight in kg')
    height: Optional[Decimal] = Field(None, description='Height in cm')
    gender: Optional[GenderEnum] = Field(
        None, description='Gender of the user\n\n* `male` - Male\n* `female` - Female'
    )
    contraindications: Optional[Any] = Field(
        None,
        description="Medical limitations or injuries(e.g. ['heart_disease', 'asthma'])",
    )
    training_location: Optional[TrainingLocationEnum] = Field(
        None,
        description='Preferred training location\n\n* `gym` - Зал\n* `home` - Дом\n* `outdoors` - Улица',
    )
    available_days: Optional[Any] = Field(
        None,
        description="List of days user is available for training (e.g. ['mon', 'wed', 'fri'])",
    )
    preferred_time: Optional[time_aliased] = Field(
        None, description='Preferred daily training time'
    )


class PatchedExercise(BaseModel):
    id: Optional[int] = None
    name: Optional[constr(max_length=100)] = Field(
        None, description='Name of the exercise'
    )
    type: Optional[TypeEnum] = Field(
        None,
        description='Main type: strength, cardio, yoga, etc.\n\n* `strength` - Сила\n* `cardio` - Кардио\n* `stretching` - Растяжка\n* `yoga` - Йога\n* `mixed` - Смешанное',
    )
    muscle_group: Optional[MuscleGroupEnum] = Field(
        None,
        description='Primary muscle group targeted\n\n* `chest` - Грудные мышцы\n* `back` - Спина\n* `shoulders` - Плечи\n* `arms` - Руки\n* `legs` - Ноги\n* `core` - Пресс / Корпус\n* `full_body` - Всё тело\n* `flexibility` - Гибкость / Подвижность\n* `other` - Другое',
    )
    equipment: Optional[EquipmentEnum] = Field(
        None,
        description='Required equipment for the exercise\n\n* `bodyweight` - Собственный вес\n* `dumbbells` - Гантели\n* `barbell` - Штанга\n* `resistance_bands` - Эспандеры / Резиновые ленты\n* `kettlebell` - Гиря\n* `machine` - Тренажёры\n* `bench` - Скамья\n* `cable` - Блочный тренажёр\n* `medicine_ball` - Медицинский мяч\n* `stability_ball` - Фитбол\n* `bosu_ball` - Босу-платформа\n* `foam_roller` - Массажный ролик (Foam Roller)\n* `box` - Плиометрическая тумба\n* `pull_up_bar` - Турник\n* `rope` - Канат\n* `trx` - TRX-петли\n* `smith_machine` - Силовая рама (Смит-машина)\n* `mat` - Коврик\n* `other` - Другое',
    )
    difficulty: Optional[DifficultyEnum] = Field(
        None,
        description='Recommended difficulty level\n\n* `beginner` - Новичок\n* `intermediate` - Средний\n* `advanced` - Продвинутый',
    )
    description: Optional[str] = Field(
        None, description='Instructions and notes about execution'
    )
    media_url: Optional[AnyUrl] = Field(
        None, description='Link to a demo video or image (optional)'
    )
    media_file: Optional[AnyUrl] = None


class Plan(BaseModel):
    id: int
    client_profile: int = Field(
        ..., description='Profile assigned to this training plan'
    )
    program: Optional[int] = Field(
        None, description='Base program used for generating the plan (optional)'
    )
    program_name: str
    goal: Optional[int] = Field(None, description='Goal at the time of plan generation')
    goal_name: str
    start_date: date_aliased = Field(..., description='Start date of the plan')
    end_date: date_aliased = Field(..., description='End date of the plan')
    status: Optional[StatusEnum] = Field(
        None,
        description='Plan status: active, completed, or cancelled\n\n* `active` - Активный\n* `completed` - Выполнен\n* `cancelled` - Отменен',
    )
    progress_percent: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Completion progress in percentage'
    )
    schedule: List[Schedule]


class WorkoutExerciseRead(BaseModel):
    id: int
    exercise: ExerciseShort
    sets: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Number of sets (for strength exercises)'
    )
    reps: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Number of reps per set (for strength exercises)'
    )
    duration: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Duration in seconds (for cardio/stretching exercises)'
    )
    rest_interval: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Rest time in seconds after this exercise'
    )
    order: conint(ge=0, le=2147483647) = Field(
        ..., description='Execution order within the workout'
    )
    notes: Optional[str] = Field(
        None, description='Optional notes or tips for this exercise'
    )


class PaginatedPlanList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Plan]] = None


class Workout(BaseModel):
    id: int
    name: constr(max_length=100) = Field(..., description='Name of the workout session')
    slug: str
    category: CategoryEnum = Field(
        ...,
        description='Main type of the workout: strength, cardio, etc.\n\n* `strength` - Сила\n* `cardio` - Кардио\n* `stretching` - Растяжка\n* `yoga` - Йога\n* `mixed` - Смешанное',
    )
    description: str = Field(..., description='Short summary of the workout session')
    duration_est: conint(ge=0, le=2147483647) = Field(
        ..., description='Estimated duration in minutes'
    )
    goal: Optional[int] = Field(
        None, description='Goal this workout targets (optional)'
    )
    level: LevelEnum = Field(
        ...,
        description='Recommended experience level for this workout\n\n* `beginner` - Новичок\n* `intermediate` - Средний\n* `advanced` - Продвинутый',
    )
    active: Optional[bool] = Field(
        None, description='If unchecked, this workout is archived'
    )
    exercises: Optional[List[WorkoutExerciseCreate]] = None
    exercises_list: List[WorkoutExerciseRead]


class PaginatedWorkoutList(BaseModel):
    total_items: Optional[int] = Field(None, example=42)
    total_pages: Optional[int] = Field(None, example=5)
    current_page: Optional[int] = Field(None, example=2)
    next: Optional[AnyUrl] = Field(None, example='http://.../page=3')
    previous: Optional[AnyUrl] = Field(None, example='http://.../page=1')
    results: Optional[List[Workout]] = None


class ScheduleDetail(BaseModel):
    id: int
    plan: int = Field(..., description='Training plan this schedule entry belongs to')
    date: date_aliased = Field(..., description='Scheduled date of the workout')
    time: time_aliased = Field(..., description='Scheduled time for the workout')
    workout: Workout
    day_number: conint(ge=0, le=2147483647) = Field(
        ..., description='Sequential number of workout in the plan'
    )
    completed: Optional[bool] = Field(None, description='Was the workout completed?')
    completed_at: datetime | None = Field(
        ..., description='Timestamp when workout was completed'
    )
    notes: Optional[str] = Field(None, description='Optional user notes or feedback')
